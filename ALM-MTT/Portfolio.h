/*
    MIT License

    Copyright (c) 2025 Harold James Krause

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/

#pragma once

#include <memory>
#include <vector>
#include <atomic>
#include <functional>
#include "TaskExecutor.h"
#include "SingleThreadedExecutor.h"
#include "Date.h"
#include "YieldCurve.h"
#include "Asset.h"

namespace ALM {

    /**
     * @brief Represents a collection of financial assets and supports concurrent valuation.
     *
     * The portfolio provides methods for calculating market value and cash flows using a yield curve
     * and a task executor for parallel evaluation.
     */
    class Portfolio {
    public:
        Portfolio() = default;

        /**
         * @brief Constructs a portfolio from a given list of assets.
         */
        Portfolio(std::vector<Asset> assets)
            : assets_(std::move(assets)) {
        }

        /**
         * @brief Add a new asset to the portfolio.
         */
        void addAsset(Asset asset) {
            assets_.push_back(std::move(asset));
        }

        /**
         * @brief Computes the total market value of the portfolio as of a given reference date.
         *
         * @param curve Discount curve used to value each asset.
         * @param ref The reference date.
         * @param executor Task executor for concurrent evaluation.
         * @return Present value of all assets in the portfolio.
         */
        double marketValue(const std::shared_ptr<const YieldCurve>& curve, const Date& ref) const {
            std::atomic<double> total = 0.0;

            for (const auto& asset : assets_) {
                total += asset.marketValue(curve, ref);
            }

            return total;
        }

        /**
         * @brief Computes the total cash flow from all assets over a date range.
         *
         * @param from Start date (exclusive).
         * @param to End date (inclusive).
         * @param executor Task executor for concurrent evaluation.
         * @return Total cash flow generated by all assets in the range.
         */
        double cashFlow(const Date& from, const Date& to, const std::shared_ptr<TaskExecutor>& executor = std::make_shared<SingleThreadedExecutor>()) const {
            std::atomic<double> total = 0.0;
            std::vector<std::function<void()>> tasks;

            for (const auto& asset : assets_) {
                tasks.emplace_back([&asset, &from, &to, &total]() {
                    total += asset.cashFlow(from, to);
                    });
            }

            executor->submitAndWait(tasks);
            return total;
        }

        /**
         * @brief Access to the asset vector for iteration or mutation.
         */
        std::vector<Asset>& assets() {
            return assets_;
        }

    private:
        std::vector<Asset> assets_;
    };

}
